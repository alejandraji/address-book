{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/app/components/card/card.js\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport styles from './card.module.scss';\nimport Button from '../button/button';\nimport Input from '../input/input';\nimport deleteById from '../../addressesApi/deleteById';\nimport create from '../../addressesApi/create';\nimport update from '../../addressesApi/update';\nconst emptyAddress = {\n  line1: '',\n  city: '',\n  state: '',\n  zip: '',\n  id: null\n}; // name needs to match address object keys\n\nconst formSchema = [{\n  label: \"Address Line 1\",\n  name: \"line1\",\n  placeholder: \"Address\",\n  type: 'text'\n}, {\n  label: \"City\",\n  name: \"city\",\n  placeholder: \"City\",\n  type: 'text'\n}, {\n  label: \"State\",\n  name: \"state\",\n  placeholder: \"State\",\n  type: 'text'\n}, {\n  label: \"Zipcode\",\n  name: \"zip\",\n  placeholder: \"Zipcode\",\n  type: 'text'\n}];\nexport default function Card({\n  initialAddress = emptyAddress,\n  prependAddress,\n  removeAddress,\n  replaceAddress\n}) {\n  const {\n    0: editState,\n    1: setEditState\n  } = useState(false);\n  const {\n    0: address,\n    1: setAddress\n  } = useState(initialAddress);\n  const {\n    0: addressErrors,\n    1: setAddressErrors\n  } = useState({\n    line1: null,\n    zip: null,\n    city: null,\n    state: null\n  });\n\n  const setAddressError = (name, message) => setAddressErrors(_objectSpread(_objectSpread({}, addressErrors), {}, {\n    [name]: message\n  }));\n\n  const formHandleClick = () => {\n    setEditState(true);\n    renderEditForm(address);\n  }; // Open form to create a new address\n\n\n  const createHandleClick = () => {\n    setEditState(true);\n  }; // Delete address\n\n\n  const deleteHandleClick = () => {\n    deleteById(address.id).then(() => removeAddress(address));\n  };\n\n  const renderEditForm = address => {\n    const handleChange = event => {\n      const updatedAddress = _objectSpread(_objectSpread({}, address), {}, {\n        [event.target.name]: event.target.value\n      });\n\n      setAddress(updatedAddress);\n    }; // Update address\n\n\n    const saveHandleClick = () => {\n      const {\n        line1\n      } = address,\n            badAddress = _objectWithoutProperties(address, [\"line1\"]);\n\n      setEditState(false);\n\n      if (!address.id) {\n        create(badAddress).then(createdAddress => prependAddress(createdAddress));\n      } else {\n        update(badAddress).then(updatedAddress => replaceAddress(updatedAddress)).catch(errors => {\n          errors.forEach(({\n            params\n          }) => setAddressError(params.missingProperty, `${params.missingProperty} is wrong`));\n        });\n      }\n    }; // Close form\n\n\n    const cancelHandleClick = () => {\n      setEditState(false);\n    };\n\n    console.log('addre errors', addressErrors);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `border-2 border-purple p-8 mt-8 w-full md:w-1/2 ${editState ? styles['card__edit--visible'] : styles['card__edit']}`,\n      children: [formSchema.map(inputSchema => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Input, _objectSpread({\n          onChange: handleChange,\n          value: address[inputSchema.name]\n        }, inputSchema), inputSchema.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this)\n      }, void 0, false)), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: saveHandleClick,\n        variant: \"primary\",\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: cancelHandleClick,\n        variant: \"primary\",\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this);\n  };\n\n  const initialAddressCard = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [initialAddress.line1, \", \", initialAddress.city, \", \", initialAddress.state, \" \", initialAddress.zip]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 30\n  }, this);\n\n  const addAddressButton = /*#__PURE__*/_jsxDEV(Button, {\n    onClick: createHandleClick,\n    variant: \"secondary\",\n    children: \"Add Address\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 28\n  }, this);\n\n  const editAndDeleteButtons = /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: formHandleClick,\n      variant: \"secondary\",\n      children: \"Edit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: deleteHandleClick,\n      variant: \"error\",\n      children: \"Delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.card,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `flex flex-wrap justify-between items-center`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4 md:mb-0\",\n        children: [!editState && !address.id && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-lg\",\n          children: \"Add a new user's address\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 40\n        }, this), initialAddress.id && initialAddressCard]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: !address.id ? addAddressButton : editAndDeleteButtons\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }, this), renderEditForm(address)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 3\n  }, this);\n}","map":{"version":3,"sources":["/app/components/card/card.js"],"names":["React","useState","useEffect","styles","Button","Input","deleteById","create","update","emptyAddress","line1","city","state","zip","id","formSchema","label","name","placeholder","type","Card","initialAddress","prependAddress","removeAddress","replaceAddress","editState","setEditState","address","setAddress","addressErrors","setAddressErrors","setAddressError","message","formHandleClick","renderEditForm","createHandleClick","deleteHandleClick","then","handleChange","event","updatedAddress","target","value","saveHandleClick","badAddress","createdAddress","catch","errors","forEach","params","missingProperty","cancelHandleClick","console","log","map","inputSchema","initialAddressCard","addAddressButton","editAndDeleteButtons","card"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\n\nimport styles from './card.module.scss'\nimport Button from '../button/button'\nimport Input from '../input/input'\nimport deleteById from '../../addressesApi/deleteById';\nimport create from '../../addressesApi/create';\nimport update from '../../addressesApi/update';\nconst emptyAddress = { line1:'', city:'', state:'', zip: '', id:null }\n\n// name needs to match address object keys\nconst formSchema = [\n  {\n    label: \"Address Line 1\",\n    name: \"line1\",\n    placeholder: \"Address\",\n    type:'text'\n\n  },\n  {\n    label: \"City\",\n    name: \"city\",\n    placeholder: \"City\",\n    type:'text'\n  },\n  {\n    label: \"State\",\n    name: \"state\",\n    placeholder: \"State\",\n    type:'text'\n  },\n  {\n    label: \"Zipcode\",\n    name: \"zip\",\n    placeholder: \"Zipcode\",\n    type:'text'\n  }\n]\n\nexport default function Card({initialAddress = emptyAddress, prependAddress, removeAddress, replaceAddress }) {\n  const [editState, setEditState] = useState(false);\n  const [address, setAddress] = useState(initialAddress)\n  const [addressErrors, setAddressErrors] = useState({line1: null, zip: null, city: null, state: null})\n  const setAddressError = (name, message) => setAddressErrors({...addressErrors, [name]: message})\n\n\n  const formHandleClick = () => {\n    setEditState(true);\n    renderEditForm(address);\n  }\n\n  // Open form to create a new address\n  const createHandleClick = () => {\n    setEditState(true);\n  }\n\n  // Delete address\n  const deleteHandleClick = () => {\n    deleteById(address.id)\n    .then(()=> removeAddress(address))\n  }\n\n  const renderEditForm = (address) => {\n    const handleChange = (event) => {\n      const updatedAddress = {\n        ...address,\n        [event.target.name]: event.target.value,\n      }\n      setAddress(updatedAddress);\n    }\n    // Update address\n    const saveHandleClick = () => {\n      const { line1, ...badAddress } = address;\n      setEditState(false);\n      if (!address.id) {\n        create(badAddress)\n          .then(createdAddress => prependAddress(createdAddress))\n        \n      } else { \n        update(badAddress)\n          .then(updatedAddress => replaceAddress(updatedAddress))\n          .catch(errors => {\n            errors.forEach(({params})=> setAddressError(params.missingProperty, `${params.missingProperty} is wrong`)  )\n          })\n      }\n    }\n    // Close form\n    const cancelHandleClick = () => {\n      setEditState(false);\n    }\n    console.log('addre errors', addressErrors);\n    return (\n      <div className={`border-2 border-purple p-8 mt-8 w-full md:w-1/2 ${editState ? styles['card__edit--visible']: styles['card__edit']}`}>\n        {formSchema.map(inputSchema => \n          <>\n            <Input \n              key={inputSchema.name}\n              onChange={handleChange} \n              value={address[inputSchema.name]} \n              {...inputSchema}\n            />\n          </>\n        )}\n        <Button onClick={saveHandleClick} variant=\"primary\">Save</Button>\n        <Button onClick={cancelHandleClick} variant=\"primary\">Cancel</Button> \n      </div>\n    )\n  }\n\n  const initialAddressCard = <p>{initialAddress.line1}, {initialAddress.city}, {initialAddress.state} {initialAddress.zip}</p>\n  const addAddressButton = <Button onClick={createHandleClick} variant=\"secondary\">Add Address</Button>\n  const editAndDeleteButtons = (\n    <>\n    <Button onClick={formHandleClick} variant=\"secondary\">Edit</Button>\n    <Button onClick={deleteHandleClick} variant=\"error\">Delete</Button> \n    </>\n  )\n\n  return (\n  <div className={styles.card}>\n    <div className={`flex flex-wrap justify-between items-center`}>\n      <div className=\"mb-4 md:mb-0\">\n        {!editState && !address.id  && <p className=\"text-lg\">Add a new user's address</p>}\n        {initialAddress.id && initialAddressCard} \n      </div>\n      <div>\n      {!address.id ? addAddressButton : editAndDeleteButtons}\n      </div>\n    </div>\n    {renderEditForm(address)}\n  </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}