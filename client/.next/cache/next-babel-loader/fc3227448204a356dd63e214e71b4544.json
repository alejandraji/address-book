{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/app/components/card/card.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport styles from './card.module.scss';\nimport Button from '../button/button';\nimport Input from '../input/input';\nimport deleteById from '../../addressesApi/deleteById';\nimport create from '../../addressesApi/create';\nimport update from '../../addressesApi/update';\nvar emptyAddress = {\n  line1: '',\n  city: '',\n  state: '',\n  zip: '',\n  id: null\n}; // name needs to match address object keys\n\nvar formSchema = [{\n  label: \"Address Line 1\",\n  name: \"line1\",\n  placeholder: \"Address\",\n  type: 'text'\n}, {\n  label: \"City\",\n  name: \"city\",\n  placeholder: \"City\",\n  type: 'text'\n}, {\n  label: \"State\",\n  name: \"state\",\n  placeholder: \"State\",\n  type: 'text'\n}, {\n  label: \"Zipcode\",\n  name: \"zip\",\n  placeholder: \"Zipcode\",\n  type: 'text'\n}];\nformSchema.map(function (inputSchema) {\n  return /*#__PURE__*/_jsxDEV(Input, _objectSpread({\n    onChange: handleChange,\n    value: address[inputSchema.name]\n  }, inputSchema), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 31\n  }, _this);\n});\nexport default function Card(_ref) {\n  _s();\n\n  var _this2 = this;\n\n  var _ref$initialAddress = _ref.initialAddress,\n      initialAddress = _ref$initialAddress === void 0 ? emptyAddress : _ref$initialAddress,\n      prependAddress = _ref.prependAddress,\n      removeAddress = _ref.removeAddress,\n      replaceAddress = _ref.replaceAddress;\n\n  var _useState = useState(false),\n      editState = _useState[0],\n      setEditState = _useState[1];\n\n  var _useState2 = useState(initialAddress),\n      address = _useState2[0],\n      setAddress = _useState2[1];\n\n  var _useState3 = useState({\n    line1: null,\n    zip: null,\n    city: null,\n    state: null\n  }),\n      addressErrors = _useState3[0],\n      setAddressErrors = _useState3[1];\n\n  var setAddressError = function setAddressError(name, message) {\n    return setAddressErrors(_objectSpread(_objectSpread({}, addressErrors), {}, _defineProperty({}, name, message)));\n  };\n\n  var formHandleClick = function formHandleClick() {\n    setEditState(true);\n    renderEditForm(address);\n  }; // Open form to create a new address\n\n\n  var createHandleClick = function createHandleClick() {\n    setEditState(true);\n  }; // Delete address\n\n\n  var deleteHandleClick = function deleteHandleClick() {\n    deleteById(address.id).then(function () {\n      return removeAddress(address);\n    });\n  };\n\n  var renderEditForm = function renderEditForm(address) {\n    var handleChange = function handleChange(event) {\n      var updatedAddress = _objectSpread(_objectSpread({}, address), {}, _defineProperty({}, event.target.name, event.target.value));\n\n      setAddress(updatedAddress);\n    }; // Update address\n\n\n    var saveHandleClick = function saveHandleClick() {\n      setEditState(false);\n\n      if (!address.id) {\n        create(address).then(function (createdAddress) {\n          return prependAddress(createdAddress);\n        });\n      } else {\n        update(address).then(function (updatedAddress) {\n          console.log(updatedAddress);\n          replaceAddress(updatedAddress);\n        });\n      }\n    }; // Close form\n\n\n    var cancelHandleClick = function cancelHandleClick() {\n      setEditState(false);\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"border-2 border-purple p-8 mt-8 w-full md:w-1/2 \".concat(editState ? styles['card__edit--visible'] : styles['card__edit']),\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        onChange: handleChange,\n        label: \"Address Line 1\",\n        name: \"line1\",\n        placeholder: \"Address\",\n        value: address.line1,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, _this2), /*#__PURE__*/_jsxDEV(Input, {\n        onChange: handleChange,\n        label: \"City\",\n        name: \"city\",\n        placeholder: \"City\",\n        value: address.city,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, _this2), /*#__PURE__*/_jsxDEV(Input, {\n        onChange: handleChange,\n        label: \"State\",\n        name: \"state\",\n        placeholder: \"State\",\n        value: address.state,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, _this2), /*#__PURE__*/_jsxDEV(Input, {\n        onChange: handleChange,\n        label: \"Zipcode\",\n        name: \"zip\",\n        placeholder: \"Zipcode\",\n        value: address.zip,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, _this2), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: saveHandleClick,\n        variant: \"primary\",\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, _this2), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: cancelHandleClick,\n        variant: \"primary\",\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, _this2)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, _this2);\n  };\n\n  var initialAddressCard = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [initialAddress.line1, \", \", initialAddress.city, \", \", initialAddress.state, \" \", initialAddress.zip]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 30\n  }, this);\n\n  var addAddressButton = /*#__PURE__*/_jsxDEV(Button, {\n    onClick: createHandleClick,\n    variant: \"secondary\",\n    children: \"Add Address\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 28\n  }, this);\n\n  var editAndDeleteButtons = /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: formHandleClick,\n      variant: \"secondary\",\n      children: \"Edit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: deleteHandleClick,\n      variant: \"error\",\n      children: \"Delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.card,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-wrap justify-between items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4 md:mb-0\",\n        children: [!editState && !address.id && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-lg\",\n          children: \"Add a new user's address\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 40\n        }, this), initialAddress.id && initialAddressCard]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: !address.id ? addAddressButton : editAndDeleteButtons\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }, this), renderEditForm(address)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Card, \"XFfSga69hQ7eYrxWuH62w3pUxvc=\");\n\n_c = Card;\n\nvar _c;\n\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"sources":["/app/components/card/card.js"],"names":["React","useState","useEffect","styles","Button","Input","deleteById","create","update","emptyAddress","line1","city","state","zip","id","formSchema","label","name","placeholder","type","map","inputSchema","handleChange","address","Card","initialAddress","prependAddress","removeAddress","replaceAddress","editState","setEditState","setAddress","addressErrors","setAddressErrors","setAddressError","message","formHandleClick","renderEditForm","createHandleClick","deleteHandleClick","then","event","updatedAddress","target","value","saveHandleClick","createdAddress","console","log","cancelHandleClick","initialAddressCard","addAddressButton","editAndDeleteButtons","card"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AAEA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,UAAP,MAAuB,+BAAvB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,IAAMC,YAAY,GAAG;AAAEC,EAAAA,KAAK,EAAC,EAAR;AAAYC,EAAAA,IAAI,EAAC,EAAjB;AAAqBC,EAAAA,KAAK,EAAC,EAA3B;AAA+BC,EAAAA,GAAG,EAAE,EAApC;AAAwCC,EAAAA,EAAE,EAAC;AAA3C,CAArB,C,CAEA;;AACA,IAAMC,UAAU,GAAG,CACjB;AACEC,EAAAA,KAAK,EAAE,gBADT;AAEEC,EAAAA,IAAI,EAAE,OAFR;AAGEC,EAAAA,WAAW,EAAE,SAHf;AAIEC,EAAAA,IAAI,EAAC;AAJP,CADiB,EAQjB;AACEH,EAAAA,KAAK,EAAE,MADT;AAEEC,EAAAA,IAAI,EAAE,MAFR;AAGEC,EAAAA,WAAW,EAAE,MAHf;AAIEC,EAAAA,IAAI,EAAC;AAJP,CARiB,EAcjB;AACEH,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,IAAI,EAAE,OAFR;AAGEC,EAAAA,WAAW,EAAE,OAHf;AAIEC,EAAAA,IAAI,EAAC;AAJP,CAdiB,EAoBjB;AACEH,EAAAA,KAAK,EAAE,SADT;AAEEC,EAAAA,IAAI,EAAE,KAFR;AAGEC,EAAAA,WAAW,EAAE,SAHf;AAIEC,EAAAA,IAAI,EAAC;AAJP,CApBiB,CAAnB;AA4BAJ,UAAU,CAACK,GAAX,CAAe,UAAAC,WAAW;AAAA,sBAAI,QAAC,KAAD;AAAO,IAAA,QAAQ,EAAEC,YAAjB;AAA+B,IAAA,KAAK,EAAEC,OAAO,CAACF,WAAW,CAACJ,IAAb;AAA7C,KAAqEI,WAArE;AAAA;AAAA;AAAA;AAAA,WAAJ;AAAA,CAA1B;AAEA,eAAe,SAASG,IAAT,OAA+F;AAAA;;AAAA;;AAAA,iCAAhFC,cAAgF;AAAA,MAAhFA,cAAgF,oCAA/DhB,YAA+D;AAAA,MAAjDiB,cAAiD,QAAjDA,cAAiD;AAAA,MAAjCC,aAAiC,QAAjCA,aAAiC;AAAA,MAAlBC,cAAkB,QAAlBA,cAAkB;;AAAA,kBAC1E3B,QAAQ,CAAC,KAAD,CADkE;AAAA,MACrG4B,SADqG;AAAA,MAC1FC,YAD0F;;AAAA,mBAE9E7B,QAAQ,CAACwB,cAAD,CAFsE;AAAA,MAErGF,OAFqG;AAAA,MAE5FQ,UAF4F;;AAAA,mBAGlE9B,QAAQ,CAAC;AAACS,IAAAA,KAAK,EAAE,IAAR;AAAcG,IAAAA,GAAG,EAAE,IAAnB;AAAyBF,IAAAA,IAAI,EAAE,IAA/B;AAAqCC,IAAAA,KAAK,EAAE;AAA5C,GAAD,CAH0D;AAAA,MAGrGoB,aAHqG;AAAA,MAGtFC,gBAHsF;;AAI5G,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACjB,IAAD,EAAOkB,OAAP;AAAA,WAAmBF,gBAAgB,iCAAKD,aAAL,2BAAqBf,IAArB,EAA4BkB,OAA5B,GAAnC;AAAA,GAAxB;;AAGA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5BN,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAO,IAAAA,cAAc,CAACd,OAAD,CAAd;AACD,GAHD,CAP4G,CAY5G;;;AACA,MAAMe,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9BR,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAFD,CAb4G,CAiB5G;;;AACA,MAAMS,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9BjC,IAAAA,UAAU,CAACiB,OAAO,CAACT,EAAT,CAAV,CACC0B,IADD,CACM;AAAA,aAAKb,aAAa,CAACJ,OAAD,CAAlB;AAAA,KADN;AAED,GAHD;;AAKA,MAAMc,cAAc,GAAG,SAAjBA,cAAiB,CAACd,OAAD,EAAa;AAClC,QAAMD,YAAY,GAAG,SAAfA,YAAe,CAACmB,KAAD,EAAW;AAC9B,UAAMC,cAAc,mCACfnB,OADe,2BAEjBkB,KAAK,CAACE,MAAN,CAAa1B,IAFI,EAEGwB,KAAK,CAACE,MAAN,CAAaC,KAFhB,EAApB;;AAIAb,MAAAA,UAAU,CAACW,cAAD,CAAV;AACD,KAND,CADkC,CAQlC;;;AACA,QAAMG,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5Bf,MAAAA,YAAY,CAAC,KAAD,CAAZ;;AACA,UAAI,CAACP,OAAO,CAACT,EAAb,EAAiB;AACfP,QAAAA,MAAM,CAACgB,OAAD,CAAN,CACEiB,IADF,CACO,UAAAM,cAAc;AAAA,iBAAIpB,cAAc,CAACoB,cAAD,CAAlB;AAAA,SADrB;AAGD,OAJD,MAIO;AACLtC,QAAAA,MAAM,CAACe,OAAD,CAAN,CACEiB,IADF,CACO,UAAAE,cAAc,EAAI;AACvBK,UAAAA,OAAO,CAACC,GAAR,CAAYN,cAAZ;AACAd,UAAAA,cAAc,CAACc,cAAD,CAAd;AACD,SAJD;AAKD;AACF,KAbD,CATkC,CAuBlC;;;AACA,QAAMO,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9BnB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAFD;;AAIA,wBACE;AAAK,MAAA,SAAS,4DAAqDD,SAAS,GAAG1B,MAAM,CAAC,qBAAD,CAAT,GAAkCA,MAAM,CAAC,YAAD,CAAtG,CAAd;AAAA,8BACE,QAAC,KAAD;AAAO,QAAA,QAAQ,EAAEmB,YAAjB;AAA+B,QAAA,KAAK,EAAC,gBAArC;AAAsD,QAAA,IAAI,EAAC,OAA3D;AAAmE,QAAA,WAAW,EAAC,SAA/E;AAAyF,QAAA,KAAK,EAAEC,OAAO,CAACb,KAAxG;AACA,QAAA,IAAI,EAAC;AADL;AAAA;AAAA;AAAA;AAAA,gBADF,eAGE,QAAC,KAAD;AAAO,QAAA,QAAQ,EAAEY,YAAjB;AAA+B,QAAA,KAAK,EAAC,MAArC;AAA4C,QAAA,IAAI,EAAC,MAAjD;AAAwD,QAAA,WAAW,EAAC,MAApE;AAA2E,QAAA,KAAK,EAAEC,OAAO,CAACZ,IAA1F;AACA,QAAA,IAAI,EAAC;AADL;AAAA;AAAA;AAAA;AAAA,gBAHF,eAKE,QAAC,KAAD;AAAO,QAAA,QAAQ,EAAEW,YAAjB;AAA+B,QAAA,KAAK,EAAC,OAArC;AAA6C,QAAA,IAAI,EAAC,OAAlD;AAA0D,QAAA,WAAW,EAAC,OAAtE;AAA8E,QAAA,KAAK,EAAEC,OAAO,CAACX,KAA7F;AAAoG,QAAA,IAAI,EAAC;AAAzG;AAAA;AAAA;AAAA;AAAA,gBALF,eAME,QAAC,KAAD;AAAO,QAAA,QAAQ,EAAEU,YAAjB;AAA+B,QAAA,KAAK,EAAC,SAArC;AAA+C,QAAA,IAAI,EAAC,KAApD;AAA0D,QAAA,WAAW,EAAC,SAAtE;AAAgF,QAAA,KAAK,EAAEC,OAAO,CAACV,GAA/F;AAAoG,QAAA,IAAI,EAAC;AAAzG;AAAA;AAAA;AAAA;AAAA,gBANF,eAOE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAEgC,eAAjB;AAAkC,QAAA,OAAO,EAAC,SAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPF,eAQE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAEI,iBAAjB;AAAoC,QAAA,OAAO,EAAC,SAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAYD,GAxCD;;AA0CA,MAAMC,kBAAkB,gBAAG;AAAA,eAAIzB,cAAc,CAACf,KAAnB,QAA4Be,cAAc,CAACd,IAA3C,QAAmDc,cAAc,CAACb,KAAlE,OAA0Ea,cAAc,CAACZ,GAAzF;AAAA;AAAA;AAAA;AAAA;AAAA,UAA3B;;AACA,MAAMsC,gBAAgB,gBAAG,QAAC,MAAD;AAAQ,IAAA,OAAO,EAAEb,iBAAjB;AAAoC,IAAA,OAAO,EAAC,WAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAzB;;AACA,MAAMc,oBAAoB,gBACxB;AAAA,4BACA,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEhB,eAAjB;AAAkC,MAAA,OAAO,EAAC,WAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAEA,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEG,iBAAjB;AAAoC,MAAA,OAAO,EAAC,OAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFA;AAAA,kBADF;;AAOA,sBACA;AAAK,IAAA,SAAS,EAAEpC,MAAM,CAACkD,IAAvB;AAAA,4BACE;AAAK,MAAA,SAAS,+CAAd;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,mBACG,CAACxB,SAAD,IAAc,CAACN,OAAO,CAACT,EAAvB,iBAA8B;AAAG,UAAA,SAAS,EAAC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADjC,EAEGW,cAAc,CAACX,EAAf,IAAqBoC,kBAFxB;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AAAA,kBACC,CAAC3B,OAAO,CAACT,EAAT,GAAcqC,gBAAd,GAAiCC;AADlC;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAUGf,cAAc,CAACd,OAAD,CAVjB;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAcD;;GAxFuBC,I;;KAAAA,I","sourcesContent":["import React, {useState, useEffect} from 'react';\n\nimport styles from './card.module.scss'\nimport Button from '../button/button'\nimport Input from '../input/input'\nimport deleteById from '../../addressesApi/deleteById';\nimport create from '../../addressesApi/create';\nimport update from '../../addressesApi/update';\nconst emptyAddress = { line1:'', city:'', state:'', zip: '', id:null }\n\n// name needs to match address object keys\nconst formSchema = [\n  {\n    label: \"Address Line 1\",\n    name: \"line1\",\n    placeholder: \"Address\",\n    type:'text'\n\n  },\n  {\n    label: \"City\",\n    name: \"city\",\n    placeholder: \"City\",\n    type:'text'\n  },\n  {\n    label: \"State\",\n    name: \"state\",\n    placeholder: \"State\",\n    type:'text'\n  },\n  {\n    label: \"Zipcode\",\n    name: \"zip\",\n    placeholder: \"Zipcode\",\n    type:'text'\n  }\n]\n\nformSchema.map(inputSchema => <Input onChange={handleChange} value={address[inputSchema.name]} {...inputSchema} />)\n\nexport default function Card({initialAddress = emptyAddress, prependAddress, removeAddress, replaceAddress }) {\n  const [editState, setEditState] = useState(false);\n  const [address, setAddress] = useState(initialAddress)\n  const [addressErrors, setAddressErrors] = useState({line1: null, zip: null, city: null, state: null})\n  const setAddressError = (name, message) => setAddressErrors({...addressErrors, [name]: message})\n\n\n  const formHandleClick = () => {\n    setEditState(true);\n    renderEditForm(address);\n  }\n\n  // Open form to create a new address\n  const createHandleClick = () => {\n    setEditState(true);\n  }\n\n  // Delete address\n  const deleteHandleClick = () => {\n    deleteById(address.id)\n    .then(()=> removeAddress(address))\n  }\n\n  const renderEditForm = (address) => {\n    const handleChange = (event) => {\n      const updatedAddress = {\n        ...address,\n        [event.target.name]: event.target.value,\n      }\n      setAddress(updatedAddress);\n    }\n    // Update address\n    const saveHandleClick = () => {\n      setEditState(false);\n      if (!address.id) {\n        create(address)\n         .then(createdAddress => prependAddress(createdAddress))\n  \n      } else { \n        update(address)\n         .then(updatedAddress => { \n          console.log(updatedAddress)\n          replaceAddress(updatedAddress)\n        })\n      }\n    }\n    // Close form\n    const cancelHandleClick = () => {\n      setEditState(false);\n    }\n\n    return (\n      <div className={`border-2 border-purple p-8 mt-8 w-full md:w-1/2 ${editState ? styles['card__edit--visible']: styles['card__edit']}`}>\n        <Input onChange={handleChange} label=\"Address Line 1\" name=\"line1\" placeholder=\"Address\" value={address.line1}\n        type=\"text\"></Input>\n        <Input onChange={handleChange} label=\"City\" name=\"city\" placeholder=\"City\" value={address.city}\n        type=\"text\"></Input>\n        <Input onChange={handleChange} label=\"State\" name=\"state\" placeholder=\"State\" value={address.state} type=\"text\"></Input>\n        <Input onChange={handleChange} label=\"Zipcode\" name=\"zip\" placeholder=\"Zipcode\" value={address.zip} type=\"text\"></Input>\n        <Button onClick={saveHandleClick} variant=\"primary\">Save</Button>\n        <Button onClick={cancelHandleClick} variant=\"primary\">Cancel</Button> \n      </div>\n    )\n  }\n\n  const initialAddressCard = <p>{initialAddress.line1}, {initialAddress.city}, {initialAddress.state} {initialAddress.zip}</p>\n  const addAddressButton = <Button onClick={createHandleClick} variant=\"secondary\">Add Address</Button>\n  const editAndDeleteButtons = (\n    <>\n    <Button onClick={formHandleClick} variant=\"secondary\">Edit</Button>\n    <Button onClick={deleteHandleClick} variant=\"error\">Delete</Button> \n    </>\n  )\n\n  return (\n  <div className={styles.card}>\n    <div className={`flex flex-wrap justify-between items-center`}>\n      <div className=\"mb-4 md:mb-0\">\n        {!editState && !address.id  && <p className=\"text-lg\">Add a new user's address</p>}\n        {initialAddress.id && initialAddressCard} \n      </div>\n      <div>\n      {!address.id ? addAddressButton : editAndDeleteButtons}\n      </div>\n    </div>\n    {renderEditForm(address)}\n  </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}